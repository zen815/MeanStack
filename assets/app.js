angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(n,o){t.currentUser=o})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,n){t.login=function(o,e){n.login(o,e).then(function(n){t.$emit("login",n)})},console.log("login.ctrl.js end")}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,n){t.addPost=function(){t.postBody&&n.create({body:t.postBody}).then(function(){t.postBody=null})},t.$on("ws:new_post",function(n,o){t.$apply(function(){t.posts.unshift(o)})}),n.fetch().then(function(n){t.posts=n})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts").then(function(t){return t.data})},this.create=function(n){return t.post("/api/posts",n)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc","$location",function(t,n,o){t.register=function(e,r){n.register(e,r).then(function(n){t.$emit("login",n),o.path("/")})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"/posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"/register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"/login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var n=this;n.getUser=function(){return t.get("/api/users")},n.login=function(o,e){return t.post("/api/sessions",{username:o,password:e}).then(function(o){return n.token=o.data,t.defaults.headers.common["x-auth"]=o.data,n.getUser()})},n.register=function(o,e){return t.post("/api/users",{username:o,password:e}).then(function(){return n.login(o,e)})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIiRvbiIsIl8iLCJ1c2VyIiwiY3VycmVudFVzZXIiLCJVc2VyU3ZjIiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidGhlbiIsIiRlbWl0IiwiY29uc29sZSIsImxvZyIsIlBvc3RzU3ZjIiwiYWRkUG9zdCIsInBvc3RCb2R5IiwiY3JlYXRlIiwiYm9keSIsInBvc3QiLCIkYXBwbHkiLCJwb3N0cyIsInVuc2hpZnQiLCJmZXRjaCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJyZXNwb25zZSIsImRhdGEiLCIkbG9jYXRpb24iLCJyZWdpc3RlciIsInBhdGgiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsInN2YyIsImdldFVzZXIiLCJ2YWwiLCJ0b2tlbiIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiJdLCJtYXBwaW5ncyI6IkFBR0FBLFFBQUFDLE9BQUEsT0FDQSxZQ0RBRCxRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsbUJBQUEsU0FBQSxTQUFBQyxHQUNBQSxFQUFBQyxJQUFBLFFBQUEsU0FBQUMsRUFBQUMsR0FDQUgsRUFBQUksWUFBQUQsT0NIQU4sUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGFBQUEsU0FBQSxVQUFBLFNBQUFDLEVBQUFLLEdBQ0FMLEVBQUFNLE1BQUEsU0FBQUMsRUFBQUMsR0FDQUgsRUFBQUMsTUFBQUMsRUFBQUMsR0FDQUMsS0FBQSxTQUFBTixHQUNBSCxFQUFBVSxNQUFBLFFBQUFQLE1BR0FRLFFBQUFDLElBQUEsd0JDUkFmLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxhQUFBLFNBQUEsV0FBQSxTQUFBQyxFQUFBYSxHQUNBYixFQUFBYyxRQUFBLFdBQ0FkLEVBQUFlLFVBQ0FGLEVBQUFHLFFBQ0FDLEtBQUFqQixFQUFBZSxXQUVBTixLQUFBLFdBQ0FULEVBQUFlLFNBQUEsUUFLQWYsRUFBQUMsSUFBQSxjQUFBLFNBQUFDLEVBQUFnQixHQUNBbEIsRUFBQW1CLE9BQUEsV0FDQW5CLEVBQUFvQixNQUFBQyxRQUFBSCxPQUlBTCxFQUFBUyxRQUFBYixLQUFBLFNBQUFXLEdBQ0FwQixFQUFBb0IsTUFBQUEsT0NwQkF2QixRQUFBQyxPQUFBLE9BQ0F5QixRQUFBLFlBQUEsUUFBQSxTQUFBQyxHQUVBQyxLQUFBSCxNQUFBLFdBQ0EsTUFBQUUsR0FBQUUsSUFBQSxjQUNBakIsS0FBQSxTQUFBa0IsR0FDQSxNQUFBQSxHQUFBQyxRQUlBSCxLQUFBVCxPQUFBLFNBQUFFLEdBQ0EsTUFBQU0sR0FBQU4sS0FBQSxhQUFBQSxPQ1hBckIsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGdCQUFBLFNBQUEsVUFBQSxZQUFBLFNBQUFDLEVBQUFLLEVBQUF3QixHQUNBN0IsRUFBQThCLFNBQUEsU0FBQXZCLEVBQUFDLEdBQ0FILEVBQUF5QixTQUFBdkIsRUFBQUMsR0FDQUMsS0FBQSxTQUFBTixHQUNBSCxFQUFBVSxNQUFBLFFBQUFQLEdBQ0EwQixFQUFBRSxLQUFBLFdDTEFsQyxRQUFBQyxPQUFBLE9BQ0FrQyxRQUFBLGlCQUFBLFNBQUFDLEdBQ0FBLEVBQ0FDLEtBQUEsS0FBQW5DLFdBQUEsWUFBQW9DLFlBQUEsZ0JBQ0FELEtBQUEsYUFBQW5DLFdBQUEsZUFBQW9DLFlBQUEsbUJBQ0FELEtBQUEsVUFBQW5DLFdBQUEsWUFBQW9DLFlBQUEsbUJDTkF0QyxRQUFBQyxPQUFBLE9BQ0F5QixRQUFBLFdBQUEsUUFBQSxTQUFBQyxHQUNBLEdBQUFZLEdBQUFYLElBQ0FXLEdBQUFDLFFBQUEsV0FDQSxNQUFBYixHQUFBRSxJQUFBLGVBR0FVLEVBQUE5QixNQUFBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQWdCLEdBQUFOLEtBQUEsaUJBQ0FYLFNBQUFBLEVBQUFDLFNBQUFBLElBQ0FDLEtBQUEsU0FBQTZCLEdBR0EsTUFGQUYsR0FBQUcsTUFBQUQsRUFBQVYsS0FDQUosRUFBQWdCLFNBQUFDLFFBQUFDLE9BQUEsVUFBQUosRUFBQVYsS0FDQVEsRUFBQUMsYUFJQUQsRUFBQU4sU0FBQSxTQUFBdkIsRUFBQUMsR0FDQSxNQUFBZ0IsR0FBQU4sS0FBQSxjQUNBWCxTQUFBQSxFQUFBQyxTQUFBQSxJQUNBQyxLQUFBLFdBQ0EsTUFBQTJCLEdBQUE5QixNQUFBQyxFQUFBQyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgemVuIG9uIDE1LiA3LiAxMC5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcbiAgICAnbmdSb3V0ZSdcbl0pOyIsIi8qKlxuICogQ3JlYXRlZCBieSB6ZW4gb24gMTUuIDcuIDE4LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAkc2NvcGUuJG9uKCdsb2dpbicsIGZ1bmN0aW9uKF8sdXNlcikge1xuICAgICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xuICAgIH0pXG59KTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgemVuIG9uIDE1LiA3LiAxNy5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBVc2VyU3ZjKXtcbiAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgVXNlclN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLCB1c2VyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKCdsb2dpbi5jdHJsLmpzIGVuZCcpO1xufSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHplbiBvbiAxNS4gNy4gMTAuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ1Bvc3RzQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgUG9zdHNTdmMpe1xuICAgICRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmKCRzY29wZS5wb3N0Qm9keSl7XG4gICAgICAgICAgICBQb3N0c1N2Yy5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIGJvZHk6ICRzY29wZS5wb3N0Qm9keVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnBvc3RCb2R5ID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgICRzY29wZS4kb24oJ3dzOm5ld19wb3N0JywgZnVuY3Rpb24oXywgcG9zdCl7XG4gICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpO1xuICAgICAgICB9KVxuICAgIH0pO1xuXG4gICAgUG9zdHNTdmMuZmV0Y2goKS50aGVuKGZ1bmN0aW9uKHBvc3RzKXtcbiAgICAgICAgJHNjb3BlLnBvc3RzID0gcG9zdHM7XG4gICAgfSk7XG59KTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgemVuIG9uIDE1LiA3LiAxMC5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnUG9zdHNTdmMnLCBmdW5jdGlvbigkaHR0cCl7XG5cbiAgICB0aGlzLmZldGNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRoaXMuY3JlYXRlID0gZnVuY3Rpb24ocG9zdCkge1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycsIHBvc3QpO1xuICAgIH07XG59KTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgemVuIG9uIDE1LiA3LiAxOS5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBVc2VyU3ZjLCAkbG9jYXRpb24pe1xuICAgJHNjb3BlLnJlZ2lzdGVyID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKXtcbiAgICAgICBVc2VyU3ZjLnJlZ2lzdGVyKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24odXNlcikge1xuICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdsb2dpbicsIHVzZXIpO1xuICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcbiAgICAgICAgICAgfSk7XG4gICB9XG59KTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgemVuIG9uIDE1LiA3LiAxNC5cbiAqL1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb25maWcoZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIpe1xuICAgICRyb3V0ZVByb3ZpZGVyXG4gICAgLndoZW4oJy8nLCAgICAgICAgICB7IGNvbnRyb2xsZXI6ICdQb3N0c0N0cmwnLCAgICB0ZW1wbGF0ZVVybDogJy9wb3N0cy5odG1sJ30gKVxuICAgIC53aGVuKCcvcmVnaXN0ZXInLCAgeyBjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJywgdGVtcGxhdGVVcmw6ICcvcmVnaXN0ZXIuaHRtbCd9KVxuICAgIC53aGVuKCcvbG9naW4nLCAgICAgeyBjb250cm9sbGVyOiAnTG9naW5DdHJsJywgICAgdGVtcGxhdGVVcmw6ICcvbG9naW4uaHRtbCd9KVxufSk7XG5cbiIsIi8qKlxuICogQ3JlYXRlZCBieSB6ZW4gb24gMTUuIDcuIDE3LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdVc2VyU3ZjJywgZnVuY3Rpb24oJGh0dHApe1xuICAgIHZhciBzdmMgPSB0aGlzO1xuICAgIHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKTtcbiAgICB9XG5cbiAgICBzdmMubG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpe1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcbiAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24odmFsKXtcbiAgICAgICAgICAgIHN2Yy50b2tlbiA9IHZhbC5kYXRhO1xuICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ3gtYXV0aCddID0gdmFsLmRhdGE7XG4gICAgICAgICAgICByZXR1cm4gc3ZjLmdldFVzZXIoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3ZjLnJlZ2lzdGVyID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKXtcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCB7XG4gICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gc3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk7XG4gICAgICAgIH0pXG4gICAgfVxufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9