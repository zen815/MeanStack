angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(n,o){t.currentUser=o})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,n){t.login=function(o,e){n.login(o,e).then(function(n){t.$emit("login",n.data)})},console.log("login.ctrl.js end")}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,n){t.addPost=function(){t.postBody&&n.create({body:t.postBody}).then(function(){t.postBody=null})},t.$on("ws:new_post",function(n,o){t.$apply(function(){t.posts.unshift(o)})}),n.fetch().then(function(n){t.posts=n})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts").then(function(t){return t.data})},this.create=function(n){return t.post("/api/posts",n)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc","$location",function(t,n,o){t.register=function(e,r){n.register(e,r).then(function(n){t.$emit("login",n),o.path("/")})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"/posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"/register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"/login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var n=this;n.getUser=function(){return t.get("/api/users")},n.login=function(o,e){return t.post("/api/sessions",{username:o,password:e}).then(function(o){return n.token=o.data,t.defaults.headers.common["x-auth"]=o.data,n.getUser()})},n.register=function(o,e){return t.post("/api/users",{username:o,password:e}).then(function(){return n.login(o,e)})}}]),angular.module("app").service("WebSocketSvc",["$rootScope","$window",function(t,n){function o(){return"https:"===n.location.protocol?"wss://"+window.location.host:"ws://"+window.location.host}var e=null;this.connect=function(){e=new WebSocket(o()),e.onmessage=function(n){console.log(n);var o=JSON.parse(n.data);t.$broadcast("ws:"+o.topic,o.data)}},this.send=function(t,n){var o=JSON.stringify({topic:t,data:n});e.send(o)}}]).run(["WebSocketSvc",function(t){t.connect()}]);
//# sourceMappingURL=data:application/json;base64,